using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using DLRS.Util;
using INIParser;
using log4net;

namespace DLRS
{
    public class Server
    {
        private static readonly ILog logger = LogManager.GetLogger("Server");
        private readonly HttpListener listener = new HttpListener();
        private readonly string serveAddress = Environment.CurrentDirectory;

        public bool Running { get; private set; }

        public Server()
        {
            logger.Info("Created DLRS");
        }

        public async Task Start()
        {
            logger.Debug("Starting DLRS Server");
            try
            {
                listener.Start();
                Running = true;
                while (Running)
                {
                    var client = await listener.GetContextAsync();
                    _ = Task.Run(() => HandleContext(client));
                }
            }
            catch (Exception ex)
            {
                logger.Warn("Exception thrown on message loop", ex);
            }
        }

        public void HandleContext(HttpListenerContext context)
        {
            var address = context.Request.RawUrl;
            logger.Info(string.Format("Request: from {0} -> {1}", context.Request.RemoteEndPoint, address));

            if (address == null)
            {
                logger.Info("Response: 400 Bad Request - null address");
                context.Response.StatusCode(HttpStatusCode.BadRequest);
                context.Response.Close();
                return;
            }

            var path = Path.Combine(serveAddress, address.Remove(0, 1));

            if (Directory.Exists(path) && !File.Exists(path))
            {
                logger.Info("Response: 200 OK - Directory index");
                HandleFolder(context.Response, path);
                return;
            }

            if (!File.Exists(path))
            {
                logger.Info("Response: 404 Not Found - No such file or directory");
                context.Response.StatusCode = 404;
                context.Response.Close();
                return;
            }

            logger.Info("Response: 200 OK - Transmitting file");
            using var stream = File.OpenRead(path);
            using var target = context.Response.OutputStream;
            stream.CopyTo(target);
        }

        public void HandleFolder(HttpListenerResponse response, string dir)
        {
            var noFiles = true;
            var noDirs = true;
            var streamWriter = new StreamWriter(response.OutputStream);

            if (!Directory.Exists(dir))
            {
                logger.Info("Response: 404 Not Found - Invalid directory");
                response.StatusCode = 404;
                response.Close();
                return;
            }

            var directories = Directory.GetDirectories(dir);
            streamWriter.WriteLine("<html><head><title>Directory View - LRS</title></head><body>");
            var rd = Path.GetRelativePath(serveAddress, dir);

            if (rd == ".")
            {
                rd = "Server Root";
            }
            streamWriter.WriteLine($"<h2>{rd}</h2>");

            if (directories.Length != 0)
            {
                noDirs = false;
                streamWriter.WriteLine("<h3>Directories</h3><ul>");
                foreach (var directory in directories)
                {
                    streamWriter.WriteLine(string.Format("<li><a href=\"{0}\">{0}</a></li>", Path.GetRelativePath(dir, directory)));
                }
                streamWriter.WriteLine("</ul><hr />");
            }

            var files = Directory.GetFiles(dir);

            if (files.Length != 0)
            {
                noFiles = false;
                streamWriter.WriteLine("<h3>Files</h3><ul>");

                foreach (var file in files)
                {
                    streamWriter.WriteLine(string.Format("<li><a href=\"{0}\">{0}</a></li>", Path.GetRelativePath(dir, file)));
                }

                streamWriter.WriteLine("</ul><hr />");
            }

            if (noFiles && noDirs)
            {
                streamWriter.WriteLine("<i>This directory is empty.</i><hr />");
            }

            streamWriter.WriteLine($"<p>Generated by DLRS at {DateTime.Now}</p>");

            streamWriter.Close();
        }

        internal async Task<Server> Configure()
        {
            var ini = new IniFile();
            await ini.LoadFileAsync("../DLRS.ini");

            var endPoint = ini["Server", "EndPoint"];
            endPoint ??= "http://localhost:10000/";

            logger.Debug($"Server will listen to {endPoint}");
            this.listener.Prefixes.Add(endPoint);

            return this;
        }
    }
}